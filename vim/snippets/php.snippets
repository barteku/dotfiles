snippet cls
	<?php
	
	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', '')`;
	
	/**
	 * ${1:`Filename('', 'myClass')`}.
	 */
	class ${2:`Filename('', 'myClass')`}
	{${3}
	}
snippet intr
	<?php
	
	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', '')`;
	
	/**
	 * ${1:`Filename('', 'myInterface')`}.
	 */
	interface ${2:`Filename('', 'myInterface')`}
	{${3}
	}
snippet it
	function it_${1:should_do_something}()
	{${2:}
	}
snippet its
	function its_${1:someMethod_should_do_something}()
	{${2:}
	}
snippet unit
	<?php
	
	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', '')`;

	use `substitute(substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', ''), '\vTests?\\', '', 'g').'\'.substitute(Filename('', 'myClass'), 'Test$', '', '')`;
	
	/**
	 * ${1:`Filename('', 'myClass')`}.
	 */
	class ${2:`Filename('', 'myClass')`} extends \PHPUnit_Framework_TestCase
	{${3}
	}
snippet ctrl
	<?php

	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', '')`;

	use Symfony\Bundle\FrameworkBundle\Controller\Controller;

	/**
	 * ${1:`substitute(Filename('', 'myClass'), 'Controller$', '', '').' controller'`}.
	 */
	class ${2:`Filename('', 'myClass')`} extends Controller
	{${3}
	}
snippet ent
	<?php
	
	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\', 'g'), '^\\', '', '')`;
	
	use Doctrine\ORM\Mapping as ORM;
	
	/**
	 * ${1:`Filename('', 'myClass')`}.
	 *
	 * @ORM\Entity
	 * @ORM\Table(name="${2:`substitute(substitute(Filename('', 'myClass'), '\v^(.)', '\l\1', ''), '\v(\u)', '_\l\1', 'g')`}")
	 */
	class ${3:`Filename('', 'myClass')`}
	{${4}
	}
snippet eid
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	${1:private} $id;
	
	/**
	 * Returns object id. 
	 * 
	 * @return integer
	 */
	public function getId()
	{
		return $this->id;
	}${2}
snippet ecol
	/**
	 * @ORM\Column(type="${1:string}"${2})
	 */
	${3:private} $${4:col};${5}
